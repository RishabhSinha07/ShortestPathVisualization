{"version":3,"sources":["source/Maze.js","index.js"],"names":["width","height","timeout","delay","Promise","res","setTimeout","matchlist","list","target","i","length","x","y","findInList","generateInitialGrid","START_X","START_Y","END_X","END_Y","Walls","temp","j","push","Maze","useState","updateStart","setUpdateStart","updateEnd","setUpdateEnd","updateWalls","setUpdateWalls","setSTART_X","setSTART_Y","setEND_X","setEND_Y","setWalls","grids","setGrid","updateGrid","color","fill","a","map","grid","backgroundColor","animation","getDistance","b","c","d","Math","sqrt","pow","abs","positionIsValid","pos","backTrace","track","child","console","log","parseInt","Object","keys","forEach","element","split","className","onClick","e","id","concat","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","start_x","start_y","end_x","end_y","temp_x","temp_y","score","Number","MAX_VALUE","startX","startY","endX","endY","queue","seen","current","shift","style","class","window","open","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1af1c10c.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport './maze.css';\r\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\r\nimport InstagramIcon from '@material-ui/icons/Instagram';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport { red } from '@material-ui/core/colors';\r\n\r\nconst width = 30;\r\nconst height = 60;\r\n\r\n\r\nfunction timeout(delay) {\r\n    return new Promise( res => setTimeout(res, delay) );\r\n}\r\n\r\nfunction matchlist(list,target){\r\n    if(! list)return false;\r\n    for(var i=0;i<list.length;i++){\r\n        if(list[i].x == target[0] && list[i].y == target[1]){\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction findInList(list,target){\r\n    if(! list)return false;\r\n    for(var i=0;i<list.length;i++){\r\n        if(list[i][0] == target[0] && list[i][1] == target[1]){\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction generateInitialGrid(START_X, START_Y, END_X, END_Y,Walls) {\r\n    let temp = [];\r\n    for(let i=0;i<width;i++){\r\n        for(let j=0;j<height;j++){\r\n            if(i === START_X && j === START_Y){\r\n                temp.push({'className':'square','backgroundColor':'green','width':i,'height':j,'animation':'linear','id':`${i}_${j}`})\r\n            }\r\n            else if(i === END_X && j === END_Y){\r\n                temp.push({'className':'square','backgroundColor':'red','width':i,'height':j,'animation':'linear','id':`${i}_${j}`})\r\n            }\r\n            else if(matchlist(Walls,[i,j])){\r\n                temp.push({'className':'square','backgroundColor':'black','width':i,'height':j,'animation':'linear','id':`${i}_${j}`})\r\n            }\r\n            else{\r\n                temp.push({'className':'square','backgroundColor':'LightGray','width':i,'height':j,'animation':'linear','id':`${i}_${j}`})}}\r\n            }\r\n    return temp\r\n}   \r\n\r\n\r\nfunction Maze() {\r\n\r\n    const [updateStart,setUpdateStart] = useState(false)\r\n    const [updateEnd,setUpdateEnd] = useState(false)\r\n    const [updateWalls,setUpdateWalls] = useState(false)\r\n    const [START_X,setSTART_X] = useState(0)\r\n    const [START_Y,setSTART_Y] = useState(0)\r\n    const [END_X,setEND_X] = useState(20)\r\n    const [END_Y,setEND_Y] = useState(50)\r\n    const [Walls,setWalls] = useState([])\r\n    const [grids,setGrid] = useState(generateInitialGrid(START_X, START_Y, END_X, END_Y,Walls));\r\n    \r\n    \r\n    const _onMouseClick = (e) => {\r\n        // console.log(updateStart,updateEnd)\r\n        // console.log(e.target.id.split('_')[0],e.target.id.split('_')[1])\r\n        if(updateStart){\r\n            console.log(Walls.length)\r\n            setSTART_X(parseInt(e.target.id.split('_')[0]));\r\n            setSTART_Y(parseInt(e.target.id.split('_')[1]));\r\n            setGrid(generateInitialGrid(parseInt(e.target.id.split('_')[0]), parseInt(e.target.id.split('_')[1]), END_X, END_Y,Walls));\r\n            setUpdateStart(false);\r\n            \r\n        }\r\n        if(updateEnd){\r\n            console.log(Walls.length)\r\n            setEND_X(parseInt(e.target.id.split('_')[0]));\r\n            setEND_Y(parseInt(e.target.id.split('_')[1]));\r\n            setGrid(generateInitialGrid(START_X,START_Y,parseInt(e.target.id.split('_')[0]), parseInt(e.target.id.split('_')[1]),Walls));\r\n            setUpdateEnd(false);\r\n            \r\n        }\r\n        if(updateWalls){\r\n            console.log(Walls.length)\r\n            console.log(\"Updating Walls\");\r\n            let temp = {'x':parseInt(e.target.id.split('_')[0]),'y':parseInt(e.target.id.split('_')[1])};\r\n            setGrid(generateInitialGrid(START_X, START_Y, END_X,END_Y,Walls.concat(temp)));\r\n            setWalls(Walls.concat(temp));\r\n        }\r\n    }\r\n\r\n    const updateStartPos = () => {\r\n        setUpdateWalls(false);\r\n        setUpdateStart(true);\r\n    }\r\n\r\n    const updateEndPos = () => {\r\n        setUpdateWalls(false);\r\n        setUpdateEnd(true);\r\n    }\r\n\r\n    const addBrick = () => {\r\n        setUpdateWalls(true);\r\n    }\r\n\r\n    const updateGrid = async(i,j,color,fill) => {\r\n        await timeout(0.001);\r\n        //document.getElementById(`${i}_${j}`).style.backgroundColor = \"blue\";\r\n        setGrid(grids => {return grids.map((grid) => {\r\n            if(grid.width === i && grid.height === j && grid.backgroundColor !== 'green' && ! matchlist(Walls,[i,j])){\r\n                grid.backgroundColor = color;\r\n                grid.animation = fill;\r\n            }\r\n            return grid;\r\n        })});\r\n    }\r\n    \r\n    const getDistance = (a,b,c,d) => {return Math.sqrt(Math.pow(Math.abs(a-c),2) + Math.pow(Math.abs(b-d),2))}\r\n\r\n    const EuclideanShortestPath = () => {\r\n        let start_x = START_X, start_y = START_Y, end_x = END_X, end_y = END_Y\r\n        while(start_x !== end_x || start_y !== end_y){\r\n            let temp_x = 0, temp_y = 0, score = Number.MAX_VALUE\r\n            if(start_x < 0 || start_x > width || start_y < 0 || start_y > height){return}\r\n            if(start_x+1 < width && getDistance(start_x+1,start_y,end_x,end_y ) < score && ! matchlist(Walls,[start_x+1,start_y])){\r\n                score = getDistance(start_x+1,start_y,end_x,end_y)\r\n                temp_x = start_x+1\r\n                temp_y = start_y\r\n                updateGrid(temp_x,temp_y,'#003399','linear')\r\n            }\r\n            else{\r\n                updateGrid(start_x+1,start_y,'red','fillSquareRejectedPath')\r\n            }\r\n            if(start_x-1 >= 0 && getDistance(start_x-1,start_y,end_x,end_y) < score && ! matchlist(Walls,[start_x-1,start_y])){\r\n                score = getDistance(start_x-1,start_y,end_x,end_y)\r\n                temp_x = start_x-1\r\n                temp_y = start_y\r\n                updateGrid(temp_x,temp_y,'#003399','linear')\r\n            }\r\n            else{\r\n                updateGrid(start_x-1,start_y,'red','fillSquareRejectedPath')\r\n            }\r\n            if(start_y+1 < height &&getDistance(start_x,start_y+1,end_x,end_y) < score && ! matchlist(Walls,[start_x,start_y+1])){\r\n                score = getDistance(start_x,start_y+1,end_x,end_y)\r\n                temp_x = start_x\r\n                temp_y = start_y+1\r\n                updateGrid(temp_x,temp_y,'#003399','linear')\r\n            }\r\n            else{\r\n                updateGrid(start_x,start_y+1,'red','fillSquareRejectedPath')\r\n            }\r\n            if(start_y-1 >= 0 && getDistance(start_x,start_y-1,end_x,end_y) < score && ! matchlist(Walls,[start_x,start_y-1])){\r\n                score = getDistance(start_x,start_y-1,end_x,end_y)\r\n                temp_x = start_x\r\n                temp_y = start_y-1\r\n                updateGrid(temp_x,temp_y,'#003399','linear','fillSquareRejectedPath')\r\n            }\r\n            else{ \r\n                updateGrid(start_x,start_y-1,'red','fillSquareRejectedPath')\r\n            }\r\n            if(start_y-1 >= 0 && start_x-1 >= 0 && getDistance(start_x-1,start_y-1,end_x,end_y) < score && ! matchlist(Walls,[start_x-1,start_y-1])){\r\n                score = getDistance(start_x-1,start_y-1,end_x,end_y)\r\n                temp_x = start_x-1\r\n                temp_y = start_y-1\r\n                updateGrid(temp_x,temp_y,'#003399','linear','fillSquareRejectedPath')\r\n            }\r\n            else{\r\n                updateGrid(start_x-1,start_y-1,'red','fillSquareRejectedPath')\r\n            }\r\n            if(start_y+1 < height && start_x+1 < width && getDistance(start_x+1,start_y+1,end_x,end_y) < score && ! matchlist(Walls,[start_x+1,start_y+1])){\r\n                score = getDistance(start_x+1,start_y+1,end_x,end_y)\r\n                temp_x = start_x+1\r\n                temp_y = start_y+1\r\n                updateGrid(temp_x,temp_y,'#003399','linear')\r\n            }\r\n            else{\r\n                updateGrid(start_x+1,start_y+1,'red','fillSquareRejectedPath')\r\n            }\r\n            if(start_y-1 >= 0 && start_x+1 < width && getDistance(start_x+1,start_y-1,end_x,end_y) < score && ! matchlist(Walls,[start_x+1,start_y-1])){\r\n                score = getDistance(start_x+1,start_y-1,end_x,end_y)\r\n                temp_x = start_x+1\r\n                temp_y = start_y-1\r\n                updateGrid(temp_x,temp_y,'#003399','linear')\r\n            }\r\n            else{\r\n                updateGrid(start_x+1,start_y-1,'red','fillSquareRejectedPath')\r\n            }\r\n            if(start_y+1 < height && start_x-1 >= 0 && getDistance(start_x-1,start_y+1,end_x,end_y) < score && ! matchlist(Walls,[start_x-1,start_y+1])){\r\n                score = getDistance(start_x-1,start_y+1,end_x,end_y)\r\n                temp_x = start_x-1\r\n                temp_y = start_y+1\r\n                updateGrid(temp_x,temp_y,'#003399','linear')\r\n            }\r\n            else{\r\n                updateGrid(start_x-1,start_y+1,'red','fillSquareRejectedPath')\r\n            }\r\n            start_x = temp_x\r\n            start_y = temp_y\r\n            console.log(score)\r\n            updateGrid(start_x,start_y,'green','fillSquareMainPath')\r\n            \r\n        }\r\n    };\r\n\r\n    const positionIsValid = (pos) => {\r\n        if (pos[0] < 0 || pos[0] > width || pos[1] < 0 || pos[1] > height || matchlist(Walls,[pos[0],pos[1]])){\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    const backTrace = (track,child) => {\r\n        console.log(child)\r\n        updateGrid(parseInt(child[0]),parseInt(child[1]),'green','fillSquareMainPath')\r\n        let keys = Object.keys(track);\r\n        keys.forEach(element => {\r\n            if(findInList(track[element],child)){\r\n                backTrace(track,[element.split(',')[0],element.split(',')[1]])\r\n                return\r\n            } \r\n        });\r\n        return\r\n    }\r\n\r\n    const BFS = () => {\r\n        let startX = START_X, startY = START_Y, endX = END_X, endY = END_Y;\r\n        let queue = [], seen = [], track = {}\r\n        let current = null;\r\n\r\n        queue.push([startX,startY]);\r\n        seen.push([startX,startY]);\r\n\r\n        while(queue.length > 0){  \r\n            current = queue.shift()\r\n            if(positionIsValid(current)){\r\n                updateGrid(current[0],current[1],'#003399','linear')\r\n\r\n                if(current[0] == endX && current[1] == endY){\r\n                    backTrace(track,current);\r\n                    return []\r\n                }\r\n                \r\n                if(positionIsValid([current[0]+1,current[1]]) && ! findInList(seen,[current[0]+1,current[1]]) && ! findInList(queue,[current[0]+1,current[1]])){\r\n                    queue.push([current[0]+1,current[1]]);\r\n                    seen.push([current[0]+1,current[1]]);\r\n                    if(!track[current]){\r\n                        track[current] = []\r\n                    }\r\n                    track[current].push([current[0]+1,current[1]]);\r\n                }\r\n                \r\n                if(positionIsValid([current[0]-1,current[1]]) && ! findInList(seen,[current[0]-1,current[1]]) && ! findInList(queue,[current[0]-1,current[1]])){\r\n                    queue.push([current[0]-1,current[1]]);\r\n                    seen.push([current[0]-1,current[1]]);\r\n                    if(!track[current]){\r\n                        track[current] = []\r\n                    }\r\n                    track[current].push([current[0]-1,current[1]]);\r\n                }\r\n                \r\n                if(positionIsValid([current[0],current[1]+1]) && ! findInList(seen,[current[0],current[1]+1]) && ! findInList(queue,[current[0],current[1]+1])){\r\n                    queue.push([current[0],current[1]+1]);\r\n                    seen.push([current[0],current[1]+1]);\r\n                    if(!track[current]){\r\n                        track[current] = []\r\n                    }\r\n                    track[current].push([current[0],current[1]+1]);\r\n                }\r\n                \r\n                if(positionIsValid([current[0],current[1]-1]) && ! findInList(seen,[current[0],current[1]-1]) && ! findInList(queue,[current[0],current[1]-1])){\r\n                    queue.push([current[0],current[1]-1]);\r\n                    seen.push([current[0],current[1]-1]);\r\n                    if(!track[current]){\r\n                        track[current] = []\r\n                    }\r\n                    track[current].push([current[0],current[1]-1]);\r\n                }\r\n            }\r\n        }\r\n        return []\r\n    }\r\n    \r\n    const clearWalls = () => {\r\n        setWalls([]);\r\n        setGrid(generateInitialGrid(START_X, START_Y, END_X,END_Y,[]));\r\n    }\r\n    \r\n    return (\r\n            <div className = 'maze' onClick={_onMouseClick}>\r\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n            <span className=\"navbar-text\">\r\n            Searching path visulization \r\n            </span>\r\n            <div className='width'></div>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav mr-auto\">\r\n            <li className=\"nav-item active\">\r\n            <button type=\"button\" className=\"btn btn-outline-success btn-sm mr-2\" onClick={updateStartPos}>Change Start</button>\r\n            </li>\r\n            <li className=\"nav-item active\">\r\n            <button type=\"button\" className=\"btn btn-outline-danger btn-sm mr-2\" onClick={updateEndPos}>Change Stop</button>\r\n            </li>\r\n            <li className=\"nav-item active\">\r\n            <button type=\"button\" className=\"btn btn-outline-warning btn-sm mr-2\" onClick={addBrick}>Add bricks</button>\r\n            </li>\r\n            <li className=\"nav-item active\">\r\n            <button type=\"button\" className=\"btn btn-dark btn-sm mr-2\" id='button' onClick={EuclideanShortestPath}>Euclidean distance</button>\r\n            </li>\r\n            <li className=\"nav-item active\">\r\n            <button type=\"button\" className=\"btn btn-dark btn-sm mr-2\" id='button' onClick={BFS}>BFS</button>\r\n            </li>\r\n            <li className=\"nav-item active\">\r\n            <button type=\"button\" className=\"btn btn-info btn-sm mr-2\" onClick={clearWalls}>Clear Walls</button>\r\n            </li>\r\n            </ul>\r\n            </div>\r\n            </nav>\r\n            <div className='grid'>\r\n            {grids.map((grid) => (\r\n            <div className={grid.className} id={grid.id}  style={{backgroundColor: `${grid.backgroundColor}`, '--x' : `${20*(grid.height+1)}px`,'--y': `${20*(grid.width+1)}px`, 'animation':`${grid.animation}  5s linear`}}></div>\r\n            ))}\r\n            </div>\r\n            <div className='footer'>\r\n            <span class=\"navbar-text\">\r\n                Created By : Rishabh Sinha\r\n            </span>\r\n            <LinkedInIcon className='icon' onClick={() => window.open('https://www.linkedin.com/in/rishabh-sinha-99a706164/')}/>\r\n            <InstagramIcon className='icon' onClick={() => window.open('https://www.instagram.com/rishabh_s1nha/')}/>\r\n            <GitHubIcon className='icon' onClick={() => window.open('https://github.com/RishabhSinha07')}/>\r\n            </div>\r\n            </div>\r\n            \r\n    );\r\n}\r\n\r\n\r\nexport default Maze;\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Maze from './source/Maze'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Maze />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}