{"version":3,"sources":["source/Maze.js","index.js"],"names":["width","height","timeout","delay","Promise","res","setTimeout","matchlist","list","target","i","length","x","y","findInList","generateInitialGrid","START_X","START_Y","END_X","END_Y","Walls","temp","j","push","Maze","useState","updateStart","setUpdateStart","updateEnd","setUpdateEnd","updateWalls","setUpdateWalls","setSTART_X","setSTART_Y","setEND_X","setEND_Y","setWalls","grids","setGrid","document","addEventListener","onmousemove","e","isNaN","parseInt","id","split","console","log","concat","updateGrid","color","fill","a","map","grid","backgroundColor","animation","getDistance","b","c","d","Math","sqrt","pow","abs","positionIsValid","pos","backTrace","track","child","Object","keys","forEach","element","className","onClick","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","start_x","start_y","end_x","end_y","temp_x","temp_y","score","Number","MAX_VALUE","startX","startY","endX","endY","queue","seen","current","shift","style","class","window","open","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.85b5442c.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport './maze.css';\r\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\r\nimport InstagramIcon from '@material-ui/icons/Instagram';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport { red } from '@material-ui/core/colors';\r\nimport { event } from 'jquery';\r\n\r\nconst width = 30;\r\nconst height = 60;\r\n\r\n\r\nfunction timeout(delay) {\r\n    return new Promise( res => setTimeout(res, delay) );\r\n}\r\n\r\nfunction matchlist(list,target){\r\n    if(! list)return false;\r\n    for(var i=0;i<list.length;i++){\r\n        if(list[i].x == target[0] && list[i].y == target[1]){\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction findInList(list,target){\r\n    if(! list)return false;\r\n    for(var i=0;i<list.length;i++){\r\n        if(list[i][0] == target[0] && list[i][1] == target[1]){\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction generateInitialGrid(START_X, START_Y, END_X, END_Y,Walls) {\r\n    let temp = [];\r\n    for(let i=0;i<width;i++){\r\n        for(let j=0;j<height;j++){\r\n            if(i === START_X && j === START_Y){\r\n                temp.push({'className':'square','backgroundColor':'green','width':i,'height':j,'animation':'linear','id':`${i}_${j}`})\r\n            }\r\n            else if(i === END_X && j === END_Y){\r\n                temp.push({'className':'square','backgroundColor':'red','width':i,'height':j,'animation':'linear','id':`${i}_${j}`})\r\n            }\r\n            else if(matchlist(Walls,[i,j])){\r\n                temp.push({'className':'square','backgroundColor':'black','width':i,'height':j,'animation':'linear','id':`${i}_${j}`})\r\n            }\r\n            else{\r\n                temp.push({'className':'square','backgroundColor':'LightGray','width':i,'height':j,'animation':'linear','id':`${i}_${j}`})}}\r\n            }\r\n    return temp\r\n}   \r\n\r\n\r\nfunction Maze() {\r\n\r\n    const [updateStart,setUpdateStart] = useState(false)\r\n    const [updateEnd,setUpdateEnd] = useState(false)\r\n    const [updateWalls,setUpdateWalls] = useState(false)\r\n    const [START_X,setSTART_X] = useState(0)\r\n    const [START_Y,setSTART_Y] = useState(0)\r\n    const [END_X,setEND_X] = useState(20)\r\n    const [END_Y,setEND_Y] = useState(50)\r\n    const [Walls,setWalls] = useState([])\r\n    const [grids,setGrid] = useState(generateInitialGrid(START_X, START_Y, END_X, END_Y,Walls));\r\n\r\n    \r\n    document.addEventListener('mousedown', () => {\r\n            let temp = []\r\n            document.onmousemove = (e) => {\r\n                if(updateWalls && !isNaN(parseInt(e.target.id.split('_')[0])) && !isNaN(parseInt(e.target.id.split('_')[1]))){\r\n                    console.log(Walls);\r\n                    temp.push({'x':parseInt(e.target.id.split('_')[0]),'y':parseInt(e.target.id.split('_')[1])});\r\n                    setGrid(generateInitialGrid(START_X, START_Y, END_X,END_Y,Walls.concat(temp)));\r\n                    setWalls(Walls.concat(temp));\r\n                    console.log(Walls);\r\n                };\r\n        };   \r\n    })\r\n    \r\n    document.addEventListener(\"mouseup\",() => {\r\n        document.onmousemove = null;\r\n    })\r\n    \r\n    const _onMouseClick = (e) => {\r\n        if(updateStart){\r\n            console.log(Walls.length)\r\n            setSTART_X(parseInt(e.target.id.split('_')[0]));\r\n            setSTART_Y(parseInt(e.target.id.split('_')[1]));\r\n            setGrid(generateInitialGrid(parseInt(e.target.id.split('_')[0]), parseInt(e.target.id.split('_')[1]), END_X, END_Y,Walls));\r\n            setUpdateStart(false);\r\n            \r\n        }\r\n        if(updateEnd){\r\n            console.log(Walls.length)\r\n            setEND_X(parseInt(e.target.id.split('_')[0]));\r\n            setEND_Y(parseInt(e.target.id.split('_')[1]));\r\n            setGrid(generateInitialGrid(START_X,START_Y,parseInt(e.target.id.split('_')[0]), parseInt(e.target.id.split('_')[1]),Walls));\r\n            setUpdateEnd(false);\r\n            \r\n        }\r\n    }\r\n\r\n    const updateStartPos = () => {\r\n        setUpdateWalls(false);\r\n        setUpdateStart(true);\r\n    }\r\n\r\n    const updateEndPos = () => {\r\n        setUpdateWalls(false);\r\n        setUpdateEnd(true);\r\n    }\r\n\r\n    const addBrick = () => {\r\n        setUpdateWalls(true);\r\n    }\r\n\r\n    const updateGrid = async(i,j,color,fill) => {\r\n        await timeout(0.001);\r\n        //document.getElementById(`${i}_${j}`).style.backgroundColor = \"blue\";\r\n        setGrid(grids => {return grids.map((grid) => {\r\n            if(grid.width === i && grid.height === j && grid.backgroundColor !== 'green' && ! matchlist(Walls,[i,j])){\r\n                grid.backgroundColor = color;\r\n                grid.animation = fill;\r\n            }\r\n            return grid;\r\n        })});\r\n    }\r\n    \r\n    const getDistance = (a,b,c,d) => {return Math.sqrt(Math.pow(Math.abs(a-c),2) + Math.pow(Math.abs(b-d),2))}\r\n\r\n    const EuclideanShortestPath = () => {\r\n        let start_x = START_X, start_y = START_Y, end_x = END_X, end_y = END_Y\r\n        while(start_x !== end_x || start_y !== end_y){\r\n            let temp_x = 0, temp_y = 0, score = Number.MAX_VALUE\r\n            if(start_x < 0 || start_x > width || start_y < 0 || start_y > height){return}\r\n            if(start_x+1 < width && getDistance(start_x+1,start_y,end_x,end_y ) < score && ! matchlist(Walls,[start_x+1,start_y])){\r\n                score = getDistance(start_x+1,start_y,end_x,end_y)\r\n                temp_x = start_x+1\r\n                temp_y = start_y\r\n                updateGrid(temp_x,temp_y,'#003399','linear')\r\n            }\r\n            else{\r\n                updateGrid(start_x+1,start_y,'red','fillSquareRejectedPath')\r\n            }\r\n            if(start_x-1 >= 0 && getDistance(start_x-1,start_y,end_x,end_y) < score && ! matchlist(Walls,[start_x-1,start_y])){\r\n                score = getDistance(start_x-1,start_y,end_x,end_y)\r\n                temp_x = start_x-1\r\n                temp_y = start_y\r\n                updateGrid(temp_x,temp_y,'#003399','linear')\r\n            }\r\n            else{\r\n                updateGrid(start_x-1,start_y,'red','fillSquareRejectedPath')\r\n            }\r\n            if(start_y+1 < height &&getDistance(start_x,start_y+1,end_x,end_y) < score && ! matchlist(Walls,[start_x,start_y+1])){\r\n                score = getDistance(start_x,start_y+1,end_x,end_y)\r\n                temp_x = start_x\r\n                temp_y = start_y+1\r\n                updateGrid(temp_x,temp_y,'#003399','linear')\r\n            }\r\n            else{\r\n                updateGrid(start_x,start_y+1,'red','fillSquareRejectedPath')\r\n            }\r\n            if(start_y-1 >= 0 && getDistance(start_x,start_y-1,end_x,end_y) < score && ! matchlist(Walls,[start_x,start_y-1])){\r\n                score = getDistance(start_x,start_y-1,end_x,end_y)\r\n                temp_x = start_x\r\n                temp_y = start_y-1\r\n                updateGrid(temp_x,temp_y,'#003399','linear','fillSquareRejectedPath')\r\n            }\r\n            else{ \r\n                updateGrid(start_x,start_y-1,'red','fillSquareRejectedPath')\r\n            }\r\n            if(start_y-1 >= 0 && start_x-1 >= 0 && getDistance(start_x-1,start_y-1,end_x,end_y) < score && ! matchlist(Walls,[start_x-1,start_y-1])){\r\n                score = getDistance(start_x-1,start_y-1,end_x,end_y)\r\n                temp_x = start_x-1\r\n                temp_y = start_y-1\r\n                updateGrid(temp_x,temp_y,'#003399','linear','fillSquareRejectedPath')\r\n            }\r\n            else{\r\n                updateGrid(start_x-1,start_y-1,'red','fillSquareRejectedPath')\r\n            }\r\n            if(start_y+1 < height && start_x+1 < width && getDistance(start_x+1,start_y+1,end_x,end_y) < score && ! matchlist(Walls,[start_x+1,start_y+1])){\r\n                score = getDistance(start_x+1,start_y+1,end_x,end_y)\r\n                temp_x = start_x+1\r\n                temp_y = start_y+1\r\n                updateGrid(temp_x,temp_y,'#003399','linear')\r\n            }\r\n            else{\r\n                updateGrid(start_x+1,start_y+1,'red','fillSquareRejectedPath')\r\n            }\r\n            if(start_y-1 >= 0 && start_x+1 < width && getDistance(start_x+1,start_y-1,end_x,end_y) < score && ! matchlist(Walls,[start_x+1,start_y-1])){\r\n                score = getDistance(start_x+1,start_y-1,end_x,end_y)\r\n                temp_x = start_x+1\r\n                temp_y = start_y-1\r\n                updateGrid(temp_x,temp_y,'#003399','linear')\r\n            }\r\n            else{\r\n                updateGrid(start_x+1,start_y-1,'red','fillSquareRejectedPath')\r\n            }\r\n            if(start_y+1 < height && start_x-1 >= 0 && getDistance(start_x-1,start_y+1,end_x,end_y) < score && ! matchlist(Walls,[start_x-1,start_y+1])){\r\n                score = getDistance(start_x-1,start_y+1,end_x,end_y)\r\n                temp_x = start_x-1\r\n                temp_y = start_y+1\r\n                updateGrid(temp_x,temp_y,'#003399','linear')\r\n            }\r\n            else{\r\n                updateGrid(start_x-1,start_y+1,'red','fillSquareRejectedPath')\r\n            }\r\n            start_x = temp_x\r\n            start_y = temp_y\r\n            console.log(score)\r\n            updateGrid(start_x,start_y,'green','fillSquareMainPath')\r\n            \r\n        }\r\n    };\r\n\r\n    const positionIsValid = (pos) => {\r\n        if (pos[0] < 0 || pos[0] > width || pos[1] < 0 || pos[1] > height || matchlist(Walls,[pos[0],pos[1]])){\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    const backTrace = (track,child) => {\r\n        console.log(child)\r\n        updateGrid(parseInt(child[0]),parseInt(child[1]),'green','fillSquareMainPath')\r\n        let keys = Object.keys(track);\r\n        keys.forEach(element => {\r\n            if(findInList(track[element],child)){\r\n                backTrace(track,[element.split(',')[0],element.split(',')[1]])\r\n                return\r\n            } \r\n        });\r\n        return\r\n    }\r\n\r\n    const BFS = () => {\r\n        let startX = START_X, startY = START_Y, endX = END_X, endY = END_Y;\r\n        let queue = [], seen = [], track = {}\r\n        let current = null;\r\n\r\n        queue.push([startX,startY]);\r\n        seen.push([startX,startY]);\r\n\r\n        while(queue.length > 0){  \r\n            current = queue.shift()\r\n            if(positionIsValid(current)){\r\n                updateGrid(current[0],current[1],'#003399','linear')\r\n\r\n                if(current[0] == endX && current[1] == endY){\r\n                    backTrace(track,current);\r\n                    return []\r\n                }\r\n                \r\n                if(positionIsValid([current[0]+1,current[1]]) && ! findInList(seen,[current[0]+1,current[1]]) && ! findInList(queue,[current[0]+1,current[1]])){\r\n                    queue.push([current[0]+1,current[1]]);\r\n                    seen.push([current[0]+1,current[1]]);\r\n                    if(!track[current]){\r\n                        track[current] = []\r\n                    }\r\n                    track[current].push([current[0]+1,current[1]]);\r\n                }\r\n                \r\n                if(positionIsValid([current[0]-1,current[1]]) && ! findInList(seen,[current[0]-1,current[1]]) && ! findInList(queue,[current[0]-1,current[1]])){\r\n                    queue.push([current[0]-1,current[1]]);\r\n                    seen.push([current[0]-1,current[1]]);\r\n                    if(!track[current]){\r\n                        track[current] = []\r\n                    }\r\n                    track[current].push([current[0]-1,current[1]]);\r\n                }\r\n                \r\n                if(positionIsValid([current[0],current[1]+1]) && ! findInList(seen,[current[0],current[1]+1]) && ! findInList(queue,[current[0],current[1]+1])){\r\n                    queue.push([current[0],current[1]+1]);\r\n                    seen.push([current[0],current[1]+1]);\r\n                    if(!track[current]){\r\n                        track[current] = []\r\n                    }\r\n                    track[current].push([current[0],current[1]+1]);\r\n                }\r\n                \r\n                if(positionIsValid([current[0],current[1]-1]) && ! findInList(seen,[current[0],current[1]-1]) && ! findInList(queue,[current[0],current[1]-1])){\r\n                    queue.push([current[0],current[1]-1]);\r\n                    seen.push([current[0],current[1]-1]);\r\n                    if(!track[current]){\r\n                        track[current] = []\r\n                    }\r\n                    track[current].push([current[0],current[1]-1]);\r\n                }\r\n            }\r\n        }\r\n        return []\r\n    }\r\n    \r\n    const clearWalls = () => {\r\n        setWalls([]);\r\n        setGrid(generateInitialGrid(START_X, START_Y, END_X,END_Y,[]));\r\n    }\r\n    \r\n    return (\r\n            <div className = 'maze' onClick={_onMouseClick}>\r\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n            <span className=\"navbar-text\">\r\n            Searching path visulization \r\n            </span>\r\n            <div className='width'></div>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav mr-auto\">\r\n            <li className=\"nav-item active\">\r\n            <button type=\"button\" className=\"btn btn-outline-success btn-sm mr-2\" onClick={updateStartPos}>Change Start</button>\r\n            </li>\r\n            <li className=\"nav-item active\">\r\n            <button type=\"button\" className=\"btn btn-outline-danger btn-sm mr-2\" onClick={updateEndPos}>Change Stop</button>\r\n            </li>\r\n            <li className=\"nav-item active\">\r\n            <button type=\"button\" className=\"btn btn-outline-warning btn-sm mr-2\" onClick={addBrick}>Add bricks</button>\r\n            </li>\r\n            <li className=\"nav-item active\">\r\n            <button type=\"button\" className=\"btn btn-dark btn-sm mr-2\" id='button' onClick={EuclideanShortestPath}>Euclidean distance</button>\r\n            </li>\r\n            <li className=\"nav-item active\">\r\n            <button type=\"button\" className=\"btn btn-dark btn-sm mr-2\" id='button' onClick={BFS}>BFS</button>\r\n            </li>\r\n            <li className=\"nav-item active\">\r\n            <button type=\"button\" className=\"btn btn-info btn-sm mr-2\" onClick={clearWalls}>Clear Walls</button>\r\n            </li>\r\n            </ul>\r\n            </div>\r\n            </nav>\r\n            <div className='grid'>\r\n            {grids.map((grid) => (\r\n            <div className={grid.className} id={grid.id}  style={{backgroundColor: `${grid.backgroundColor}`, '--x' : `${20*(grid.height+1)}px`,'--y': `${20*(grid.width+1)}px`, 'animation':`${grid.animation}  5s linear`}}></div>\r\n            ))}\r\n            </div>\r\n            <div className='footer'>\r\n            <span class=\"navbar-text\">\r\n                Created By : Rishabh Sinha\r\n            </span>\r\n            <LinkedInIcon className='icon' onClick={() => window.open('https://www.linkedin.com/in/rishabh-sinha-99a706164/')}/>\r\n            <InstagramIcon className='icon' onClick={() => window.open('https://www.instagram.com/rishabh_s1nha/')}/>\r\n            <GitHubIcon className='icon' onClick={() => window.open('https://github.com/RishabhSinha07')}/>\r\n            </div>\r\n            </div>\r\n            \r\n    );\r\n}\r\n\r\n\r\nexport default Maze;\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Maze from './source/Maze'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Maze />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}